package @APP_PACKAGE@;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.PixelFormat;
import android.graphics.Point;
import android.hardware.display.DisplayManager;
import android.hardware.display.VirtualDisplay;
import android.media.Image;
import android.media.ImageReader;
import android.media.projection.MediaProjection;
import android.media.projection.MediaProjectionManager;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;

import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;

/**
 * Created by cbro on 9/27/16.
 */
public class XBMCProjection implements ImageReader.OnImageAvailableListener
{
  private static final int INTENT_RESULT_PROJECT_CODE = 4658;

  private Main mActivity;
  private MediaProjectionManager mProjectionManager;
  private MediaProjection mMediaProjection;
  private VirtualDisplay mVirtualDisplay;
  private ImageReader mImageReader;

  private Handler mHandler;

  private int mWidth;
  private int mHeight;

  public XBMCProjection(Main act)
  {
    mActivity = act;
    mProjectionManager = (MediaProjectionManager) mActivity.getSystemService(mActivity.MEDIA_PROJECTION_SERVICE);

        // start capture handling thread
        new Thread() {
            @Override
            public void run() {
                Looper.prepare();
                mHandler = new Handler();
                Looper.loop();
            }
        }.start();
  }

  private VirtualDisplay createVirtualDisplay()
  {
    Log.d("XBMCProjection", "createVirtualDisplay");

    Point size = new Point();
    mActivity.getWindowManager().getDefaultDisplay().getSize(size);
    mWidth = size.x;
    mHeight = size.y;

    if (mImageReader == null)
    {
      Log.d("XBMCProjection", "create image reader");
      mImageReader = ImageReader.newInstance(mWidth, mHeight, PixelFormat.RGBA_8888, 1);
      mImageReader.setOnImageAvailableListener(this, mHandler);
    }
    return mMediaProjection.createVirtualDisplay("rendercapture",
            mWidth, mHeight, mActivity.getResources().getDisplayMetrics().densityDpi,
            DisplayManager.VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY,
            mImageReader.getSurface(), null, mHandler);
  }

  private class MediaProjectionCallback extends MediaProjection.Callback
  {
    @Override
    public void onStop()
    {
      if (mVirtualDisplay != null)
      {
        mVirtualDisplay.release();
        mVirtualDisplay = null;
      }
    }
  }

  @Override
  public void onImageAvailable(ImageReader reader)
  {
    Log.d("XBMCProjection", "onImageAvailable");

    final Image image = mImageReader.acquireLatestImage();
    mActivity._onCaptureAvailable(image);

    if (mVirtualDisplay != null)
    {
      mVirtualDisplay.release();
      mVirtualDisplay = null;
    }

/*
    if (image != null && !mFilename.isEmpty())
    {
      Image.Plane[] planes = image.getPlanes();
      ByteBuffer buffer = planes[0].getBuffer();
      int pixelStride = planes[0].getPixelStride();
      int rowStride = planes[0].getRowStride();
      int rowPadding = rowStride - pixelStride * mWidth;
      int bitmapWidth = mWidth + rowPadding / pixelStride;

      Bitmap bmp = Bitmap.createBitmap(bitmapWidth, mHeight, Bitmap.Config.ARGB_8888);
      bmp.copyPixelsFromBuffer(buffer);

      image.close();
      if (mVirtualDisplay != null)
      {
        mVirtualDisplay.release();
        mVirtualDisplay = null;
      }

      FileOutputStream out = null;
      try
      {
        out = new FileOutputStream(mFilename);
        bmp.compress(Bitmap.CompressFormat.PNG, 100, out);
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }
      finally
      {
        try
        {
          if (out != null)
            out.close();
        }
        catch (IOException e)
        {
          e.printStackTrace();
        }
      }
    }
    */
  }

  /***************/

  public void Initialize(int resultCode, Intent resultData)
  {
    mMediaProjection = mProjectionManager.getMediaProjection(resultCode, resultData);
    mMediaProjection.registerCallback(new MediaProjectionCallback(), null);
  }

  public void takeScreenshot()
  {
    Log.d("XBMCProjection", "takeScreenshot1");
    if (mMediaProjection == null)
      return;
    Log.d("XBMCProjection", "takeScreenshot2");
    mVirtualDisplay = createVirtualDisplay();
  }

  public int startProjection()
  {
    mActivity.startActivityForResult(mProjectionManager.createScreenCaptureIntent(), INTENT_RESULT_PROJECT_CODE);
    return INTENT_RESULT_PROJECT_CODE;
  }

  public void stopProjection()
  {
    mHandler.post(new Runnable()
    {
      @Override
      public void run()
      {
        if (mMediaProjection != null)
        {
          mMediaProjection.stop();
        }
      }
    });
  }

}

