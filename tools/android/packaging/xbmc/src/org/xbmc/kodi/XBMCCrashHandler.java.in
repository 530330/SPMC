package @APP_PACKAGE@;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.MailTo;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class XBMCCrashHandler extends Activity
{
  public static final String TAG = "XBMCCrashHandler";
  protected void onCreate(Bundle state)
  {
    super.onCreate(state);
    setTitle(R.string.crashtitle);
    setContentView(R.layout.crash_handler);
    final Button b = (Button)findViewById(R.id.report);
    final Button c = (Button)findViewById(R.id.close);

    b.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View v)
      {
        final ProgressDialog progress = new ProgressDialog(XBMCCrashHandler.this);
        progress.setMessage(getString(R.string.getting_log));
        progress.setIndeterminate(true);
        progress.setCancelable(false);
        progress.show();
        final AsyncTask task = new AsyncTask<Void,Void,Void>()
        {
          String log;
          Process process;
          @Override
          protected Void doInBackground(Void... v)
          {
            try {
              process = Runtime.getRuntime().exec(new String[]{"logcat","-d","-v","threadtime"});
              log = readAllOf(process.getInputStream());
            } catch (IOException e) {
              e.printStackTrace();
              Toast.makeText(XBMCCrashHandler.this, e.toString(), Toast.LENGTH_LONG).show();
            }
            return null;
          }

          @Override
          protected void onCancelled()
          {
            process.destroy();
          }

          @Override
          protected void onPostExecute(Void v)
          {
              progress.setMessage(getString(R.string.starting_email));
            boolean ok = tryEmailAuthor(XBMCCrashHandler.this, true,
                getString(R.string.crash_preamble)+"\n\n\n\nLog:\n"+log);
            progress.dismiss();
            if (ok) {
              finish();
            }
          }
        }.execute();

        b.postDelayed(new Runnable()
        {
          public void run()
          {
            if (task.getStatus() == AsyncTask.Status.FINISHED) return;
            // It's probably one of these devices where some fool broke logcat.
            progress.dismiss();
            task.cancel(true);
            new AlertDialog.Builder(XBMCCrashHandler.this)
              .setMessage(MessageFormat.format(getString(R.string.get_log_failed), getString(R.string.crash_email)))
              .setCancelable(true)
              .setIcon(android.R.drawable.ic_dialog_alert)
              .show();
          }
        }, 3000);
      }
    });

    c.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View v)
      {
        finish();
      }
    });
  }

  static String getVersion(Context c)
  {
    try {
      return c.getPackageManager().getPackageInfo(c.getPackageName(),0).versionName;
    } catch(Exception e) { return c.getString(R.string.unknown_version); }
  }

  static String readAllOf(InputStream s) throws IOException
  {
    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(s),8096);
    String line;
    StringBuilder log = new StringBuilder();
    while ((line = bufferedReader.readLine()) != null)
    {
      log.append(line);
      log.append("\n");
    }
    return log.toString();
  }

  static boolean tryEmailAuthor(Context c, boolean isCrash, String body)
  {
    String addr = c.getString(R.string.crash_email);
    Intent i = new Intent(Intent.ACTION_SEND);
    String modVer = "";
    try {
      Process p = Runtime.getRuntime().exec(new String[]{"getprop","ro.modversion"});
      modVer = readAllOf(p.getInputStream()).trim();
    } catch (Exception e) {}

    if (modVer.length() == 0)
      modVer = "original";

    // second empty address because of http://code.google.com/p/k9mail/issues/detail?id=589
    i.putExtra(Intent.EXTRA_EMAIL, new String[]{addr, ""});
    i.putExtra(Intent.EXTRA_SUBJECT, MessageFormat.format(c.getString(
          isCrash ? R.string.crash_subject : R.string.email_subject),
          getVersion(c), Build.MODEL, modVer, Build.FINGERPRINT));
    i.setType("message/rfc822");
    i.putExtra(Intent.EXTRA_TEXT, body!=null ? body : "");
    try {
      c.startActivity(i);
      return true;
    } catch (ActivityNotFoundException e) {
      try {
        // Get the OS to present a nicely formatted, translated error
        c.startActivity(Intent.createChooser(i,null));
      } catch (Exception e2) {
        e2.printStackTrace();
        Toast.makeText(c, e2.toString(), Toast.LENGTH_LONG).show();
      }
      return false;
    }
  }
}
